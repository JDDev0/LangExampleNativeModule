fn.println(This file was called with &LANG_ARGS)
fn.println()

fn.printTerminal(3, \$LANG_MODULE_PATH \= $LANG_MODULE_PATH)
fn.printTerminal(3, \$LANG_MODULE_FILE \= $LANG_MODULE_FILE)
fn.println()

fn.println(Simple output with parser.op(2 ** +|3))
fn.println()

fp.exampleFunc = ($a) -> {
    fn.println(Called with $a)
}

fp.exampleFunc(test)
fn.println()

fn.moduleExportNormalVariable(intFromLib, 42)
fn.moduleExportNormalVariable(arrayFromLib, fn.arrayOf(1, abc, null, 5.8, 1.2f))

fn.moduleExportNormalVariable(finalVarFromLib, -42.84f, 1)

fn.moduleExportCollectionVariable(arrFromLib, fn.arrayOf(1, abc, null, 5.8, 1.2f))

fn.moduleExportCollectionVariable(finalArrFromLib, fn.arrayOf(42, $LANG_MODULE_FILE), 1)

fn.moduleExportFunctionPointerVariable(funcFromLib, fn.inc)

fn.moduleExportFunctionPointerVariable(finalFuncFromLib, fn.dec, 1)

# Exporting pointers
$internalVariable = 42
fn.moduleExportNormalVariable(pointerFromLib, $[internalVariable])

# Accessing exported module variables within the module (The module name must be used)
fn.println(Int value from lib is [[example_module]]::$intFromLib and the int value from native is [[example_module]]::$intVar)

return parser.op(42 ** 2 ^ 15)